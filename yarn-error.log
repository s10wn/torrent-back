import express from 'express';
import WebTorrent from 'webtorrent';
import cors from 'cors';
import pump from 'pump';

async function setupServer() {
    const app = express();
    const client = new WebTorrent();

    app.use(cors());
    app.use(express.json());

    app.post('/add-torrent', (req, res) => {
        const torrentId = req.body.torrentId;
        client.add(torrentId, torrent => {

            const file = torrent.files.find(file => file.name.endsWith('.mp4'));
            if (file) {
                res.json({ url: `http://localhost:3001/stream/${encodeURIComponent(torrentId)}` });
            } else {
                res.status(404).send('Видеофайл не найден');
            }
        });
    });

    app.get('/stream/:torrentId', (req, res) => {
        const torrentId = decodeURIComponent(req.params.torrentId);
        const torrents = client.get(torrentId).then((torrent) => {
            if (torrent && torrent.torrentFile) {
                const file = torrent.files.find(file => file.name.endsWith('.mp4'));
                if (file) {
                    const range = req.headers.range;
                    const videoSize = file.length;
                    if (range) {
                        const parts = range.replace(/bytes=/, "").split("-");
                        const start = parseInt(parts[0], 10);
                        const end = parts[1] ? parseInt(parts[1], 10) : videoSize - 1;
                        const chunksize = (end - start) + 1;
                        const fileStream = file.createReadStream({ start, end });
                        res.writeHead(206, {
                            "Content-Range": `bytes ${start}-${end}/${videoSize}`,
                            "Accept-Ranges": "bytes",
                            "Content-Length": chunksize,
                            "Content-Type": "video/mp4",
                        });
                        pump(fileStream, res);
                    } else {
                        res.writeHead(200, { 'Content-Length': videoSize, 'Content-Type': 'video/mp4' });
                        pump(file.createReadStream(), res);
                    }
                } else {
                    res.status(404).send('Видеофайл не найден');
                }
            } else {
                res.status(404).send('Торрент не найден');
            }
        });

    });

    const PORT = process.env.PORT || 3001;
    app.listen(PORT, () => {
        console.log(`Server is running on port ${PORT}`);
    });
}

setupServer().catch(err => console.error(err));
